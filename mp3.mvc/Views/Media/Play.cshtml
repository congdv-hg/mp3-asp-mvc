@model App.Domain.Entities.Media

@{
    ViewData["Title"] = "Play";
}

<div class="d-flex">
    <div style="width:20%;">
        <partial name="./Common/Media/_musicAvatarPreviewPartial" model="@Model.MediaContent" />
    </div>
    <div style="width: 80%;margin-left: 20px;">
        <h3>@Model.Name</h3>
        <p>@Model.Author?.Name</p>
        <p>Mô tả: <br/> @Model.Description</p>
    </div>
</div>
<audio id="audioPlayer" class="invisible" controls>
    <source src="@Model.ContentUrl" type="audio/mpeg">
    Your browser does not support the audio element.
</audio>
<div class="controls d-flex">
    <button id="playPauseButton">
        <svg id="playBtn" width="12" height="14" viewBox="0 0 12 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M11.394 8.04565L1.8495 13.5836C1.0395 14.0531 0 13.4846 0 12.5381V1.46215C0 0.517148 1.038 -0.052852 1.8495 0.418148L11.394 5.95615C11.5783 6.06133 11.7314 6.21338 11.8379 6.39686C11.9445 6.58034 12.0006 6.78873 12.0006 7.0009C12.0006 7.21306 11.9445 7.42146 11.8379 7.60494C11.7314 7.78842 11.5783 7.94046 11.394 8.04565Z" fill="black" />
        </svg>
        <svg id="pauseBtn" style="display: none;" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8.25 5.25C8.84674 5.25 9.41903 5.48705 9.84099 5.90901C10.2629 6.33097 10.5 6.90326 10.5 7.5V16.5C10.5 17.0967 10.2629 17.669 9.84099 18.091C9.41903 18.5129 8.84674 18.75 8.25 18.75C7.65326 18.75 7.08097 18.5129 6.65901 18.091C6.23705 17.669 6 17.0967 6 16.5V7.5C6 6.90326 6.23705 6.33097 6.65901 5.90901C7.08097 5.48705 7.65326 5.25 8.25 5.25ZM15.75 5.25C16.3467 5.25 16.919 5.48705 17.341 5.90901C17.7629 6.33097 18 6.90326 18 7.5V16.5C18 17.0967 17.7629 17.669 17.341 18.091C16.919 18.5129 16.3467 18.75 15.75 18.75C15.1533 18.75 14.581 18.5129 14.159 18.091C13.7371 17.669 13.5 17.0967 13.5 16.5V7.5C13.5 6.90326 13.7371 6.33097 14.159 5.90901C14.581 5.48705 15.1533 5.25 15.75 5.25Z" fill="black" />
        </svg>
    </button>
    <button id="nextButton">Next</button>
</div>
<progress id="progressBar" value="0" max="100"></progress>

<script>
    const audio = document.getElementById('audioPlayer');
    const progressBar = document.getElementById('progressBar');
    const playPauseButton = document.getElementById('playPauseButton');
    const nextButton = document.getElementById('nextButton');
    const playBtn = document.getElementById('playBtn');
    const pauseBtn = document.getElementById('pauseBtn');
    let isPlaying = false;

    // Update progress bar as audio plays
    audio.addEventListener('timeupdate', () => {
        const currentTime = audio.currentTime;
        const duration = audio.duration;
        if (duration) {
            const progress = (currentTime / duration) * 100;
            progressBar.value = progress;
        }
    });

    // Seek audio when progress bar is clicked
    progressBar.addEventListener('click', (event) => {
        const clickedPosition = event.offsetX;
        const progressBarWidth = progressBar.clientWidth;
        const duration = audio.duration;
        if (duration) {
            const seekTime = (clickedPosition / progressBarWidth) * audio.duration;
            audio.currentTime = seekTime;
        }
    });

    // Play/Pause functionality
    playPauseButton.addEventListener('click', () => {
        if (isPlaying) {
            audio.pause();
            playBtn.style.display = 'block';
            pauseBtn.style.display = 'none';
        } else {
            audio.play();
            playBtn.style.display = 'none';
            pauseBtn.style.display = 'block';
        }
        isPlaying = !isPlaying;
    });

    // Next button functionality (dummy function, replace with your logic)
    nextButton.addEventListener('click', () => {
        // Add logic to go to the next track
        alert('Next track');
    });
</script>


<style>
    button#playPauseButton{
        width: 50px;
        height: 50px;
        border-radius: 25px;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    /* Style for the progress bar */
    progress {
        width: 100%;
        height: 5px;
        appearance: none;
        -webkit-appearance: none;
        border: none;
        background-color: #f0f0f0;
        border-radius: 10px;
    }

        progress::-webkit-progress-bar {
            background-color: #f0f0f0;
            border-radius: 10px;
        }

        progress::-webkit-progress-value {
            background-color: #9747FF;
            border-radius: 10px;
        }

        progress:hover {
            height: 12px;
            box-shadow: 0 0 10px rgba(1, 1, 1, 0.5);
        }

    /* Style for custom buttons */
    .controls {
        display: flex;
        justify-content: center;
        margin-top: 10px;
    }

        .controls button {
            margin: 0 5px;
            padding: 5px 10px;
            border: none;
            background-color: #9747FF;
            color: white;
            cursor: pointer;
            border-radius: 5px;
        }
</style>